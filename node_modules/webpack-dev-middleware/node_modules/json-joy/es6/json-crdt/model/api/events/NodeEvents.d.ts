import { Emitter } from '../../../../util/events/Emitter';
import type { NodeApi } from '../nodes';
export interface NodeEventMap {
    view: CustomEvent<void>;
}
export declare class NodeEvents extends Emitter<NodeEventMap> {
    private readonly api;
    constructor(api: NodeApi);
    private viewSubs;
    private _view;
    private onModelChange;
    private setupViewEvents;
    on<K extends keyof NodeEventMap>(type: K, listener: (ev: NodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    off<K extends keyof NodeEventMap>(type: K, listener: (ev: NodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
}
